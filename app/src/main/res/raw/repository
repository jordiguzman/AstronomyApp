public void getDataWiki() {

        final ApiInterfaceWiki mApiInterfaceWiki = ApiClientWiki.getClient().create(ApiInterfaceWiki.class);
        Call<WikiPlanets> call = mApiInterfaceWiki.getData(TITLE);
        call.enqueue(new Callback<WikiPlanets>() {
            @Override
            public void onResponse(@NonNull Call< WikiPlanets> call, @NonNull Response<WikiPlanets> response) {

                switch (response.code()){
                    case 200:
                        wikiPlanets = response.body();
                        assert wikiPlanets != null;
                        String title = wikiPlanets.getTitle();
                        Log.i("Title", "valor: " +title);

                        Log.i("Response OK", response.toString());
                        break;
                        default:
                            Log.i("Response error", response.toString());
                }
            }

            @Override
            public void onFailure(@NonNull Call<WikiPlanets> call, @NonNull Throwable t) {
                Log.e("Error", t.getMessage());

            }
        });

    }


     public void getDataWiki() {

            String url = BASE_URL + TITLE;
            AsyncHttpClient client = new AsyncHttpClient();
            client.get(url, null, new JsonHttpResponseHandler(){
                @Override
                public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
                    super.onSuccess(statusCode, headers, response);
                    try {
                        arrayList.add(new JSONArray());
                        JSONObject jsonObject = new JSONObject(arrayList.toString());
                        JSONArray result = jsonObject.getJSONArray("pages");

                        textView.setText(result.toString());



                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {
                    super.onFailure(statusCode, headers, throwable, errorResponse);
                    Log.e("Error", throwable.getMessage());
                }
            });

        }